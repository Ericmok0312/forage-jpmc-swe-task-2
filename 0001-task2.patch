From 75042d4580938e89ca3b6bf287067989c7290c4c Mon Sep 17 00:00:00 2001
From: Eric <weemokkachun@gmail.com>
Date: Wed, 31 Jul 2024 16:18:21 +0800
Subject: [PATCH] task2

---
 src/App.tsx   | 27 +++++++++++++++++++--------
 src/Graph.tsx | 19 ++++++++++++++++---
 2 files changed, 35 insertions(+), 11 deletions(-)

diff --git a/src/App.tsx b/src/App.tsx
index 0728518..7df7358 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -8,6 +8,7 @@ import './App.css';
  */
 interface IState {
   data: ServerRespond[],
+  showGraph : boolean,
 }
 
 /**
@@ -22,6 +23,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +31,27 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
-    return (<Graph data={this.state.data}/>)
+    if (this.state.showGraph)
+      return (<Graph data={this.state.data}/>)
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
-  getDataFromServer() {
-    DataStreamer.getData((serverResponds: ServerRespond[]) => {
-      // Update the state by creating a new array of data that consists of
-      // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+  async getDataFromServer() {
+          var i=0
+          var interval = setInterval(()=>{DataStreamer.getData((serverResponds: ServerRespond[]) => {
+            // Update the state by creating a new array of data that consists of
+            // Previous data in the state and the new data from server
+              if (JSON.stringify(serverResponds) === JSON.stringify(this.state.data) === false){
+                this.setState({ data: serverResponds, showGraph:true });
+              }
+              i ++
+              if(i>10){
+                clearInterval(interval);
+              }
+          })}, 100);
+          
   }
 
   /**
@@ -63,7 +74,7 @@ class App extends Component<{}, IState> {
             Start Streaming Data
           </button>
           <div className="Graph">
-            {this.renderGraph()}
+              {this.renderGraph()}
           </div>
         </div>
       </div>
diff --git a/src/Graph.tsx b/src/Graph.tsx
index 3b2a7da..de54968 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,8 +32,21 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
-
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    elem.setAttribute('view', 'y_line')
+    elem.setAttribute('column-pivots', '["stock"]');
+    elem.setAttribute('row-pivots', '["timestamp"]');
+    elem.setAttribute('columns', '["top_ask_price"]');
+    elem.setAttribute('aggregates',
+      `
+      {
+        "stock" : "distinct count",
+        "top_ask_price" : "avg",
+        "top_bid_price" : "avg",
+        "timestamp" : "distinct count"
+      }
+      `
+    );
     const schema = {
       stock: 'string',
       top_ask_price: 'float',
-- 
2.20.1

